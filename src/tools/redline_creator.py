"""
Lambda Tool 6: Redline Creator
Generates tracked-changes document
"""

import json
import boto3
import os
from typing import Dict, Any, List
from datetime import datetime
from docx import Document
from docx.shared import RGBColor
from docx.enum.text import WD_COLOR_INDEX

s3 = boto3.client('s3')

DOCUMENTS_BUCKET = os.getenv('DOCUMENTS_BUCKET', 'contractguard-documents-bucket')


def lambda_handler(event, context):
    """
    Generate redlined document with tracked changes.
    
    Expected input:
    {
        "contract_id": "contract-uuid-123",
        "recommendations": [...],
        "output_format": "DOCX"
    }
    """
    print(f"Received event: {json.dumps(event)}")
    
    try:
        contract_id = event.get('contract_id')
        recommendations = event.get('recommendations', [])
        output_format = event.get('output_format', 'DOCX')
        
        if not contract_id or not recommendations:
            return error_response("Missing required parameters")
        
        # Create redlined document
        if output_format == 'DOCX':
            document_path = create_redline_docx(contract_id, recommendations)
        else:
            return error_response(f"Unsupported format: {output_format}")
        
        # Upload to S3
        s3_key = f"redlines/{contract_id}/redline-{datetime.utcnow().timestamp()}.docx"
        s3.upload_file(document_path, DOCUMENTS_BUCKET, s3_key)
        
        # Generate presigned URL
        url = s3.generate_presigned_url(
            'get_object',
            Params={'Bucket': DOCUMENTS_BUCKET, 'Key': s3_key},
            ExpiresIn=3600  # 1 hour
        )
        
        return success_response({
            'document_url': url,
            's3_location': f"s3://{DOCUMENTS_BUCKET}/{s3_key}",
            'format': output_format,
            'changes_count': len(recommendations)
        })
        
    except Exception as e:
        print(f"Error in redline_creator: {str(e)}")
        return error_response(str(e))


def create_redline_docx(contract_id: str, recommendations: List[Dict[str, Any]]) -> str:
    """
    Create DOCX file with tracked changes.
    """
    
    doc = Document()
    
    # Add title
    title = doc.add_heading('Contract Redline - Proposed Changes', 0)
    
    # Add metadata
    doc.add_paragraph(f"Contract ID: {contract_id}")
    doc.add_paragraph(f"Generated: {datetime.utcnow().strftime('%B %d, %Y at %I:%M %p UTC')}")
    doc.add_paragraph(f"Changes: {len(recommendations)}")
    doc.add_paragraph()
    
    # Add summary
    doc.add_heading('Summary of Changes', 1)
    summary_para = doc.add_paragraph()
    summary_para.add_run(f"This document contains {len(recommendations)} proposed changes to improve contract terms and reduce business risk.")
    doc.add_paragraph()
    
    # Add each recommendation
    for i, rec in enumerate(recommendations, 1):
        doc.add_heading(f"Change #{i}: {rec.get('clause_type', 'Clause')}", 2)
        
        # Original text (with strikethrough simulation)
        orig_para = doc.add_paragraph()
        orig_para.add_run('Original: ').bold = True
        orig_run = orig_para.add_run(rec.get('original_text', 'N/A'))
        orig_run.font.color.rgb = RGBColor(255, 0, 0)  # Red
        orig_run.font.strike = True
        
        # Proposed text (highlighted)
        prop_para = doc.add_paragraph()
        prop_para.add_run('Proposed: ').bold = True
        prop_run = prop_para.add_run(rec.get('recommended_text', 'N/A'))
        prop_run.font.color.rgb = RGBColor(0, 128, 0)  # Green
        
        # Rationale
        rat_para = doc.add_paragraph()
        rat_para.add_run('Rationale: ').bold = True
        rat_para.add_run(rec.get('rationale', 'N/A'))
        
        # Impact
        impact_para = doc.add_paragraph()
        impact_para.add_run('Impact: ').bold = True
        impact_para.add_run(rec.get('impact', 'Improves contract terms'))
        
        doc.add_paragraph()  # Spacing
    
    # Add footer
    doc.add_page_break()
    doc.add_heading('Legal Disclaimer', 1)
    disclaimer = doc.add_paragraph()
    disclaimer.add_run("""These recommendations are generated by ContractGuard AI and are for informational purposes only. 
This is not legal advice and does not create an attorney-client relationship. 
Always consult a qualified attorney before making final contract decisions.""").italic = True
    
    # Save to temp file
    import tempfile
    temp_path = os.path.join(tempfile.gettempdir(), f"redline-{contract_id}.docx")
    doc.save(temp_path)
    
    return temp_path


def success_response(data: Dict[str, Any]) -> Dict[str, Any]:
    return {
        'statusCode': 200,
        'body': json.dumps({
            'success': True,
            'data': data
        })
    }


def error_response(error_message: str) -> Dict[str, Any]:
    return {
        'statusCode': 500,
        'body': json.dumps({
            'success': False,
            'error': error_message
        })
    }